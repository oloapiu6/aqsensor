{"version":3,"sources":["utils.js","SimpleMap.js","SensorsList.js","App.js","reportWebVitals.js","index.js"],"names":["calculatePm25AQI","concentration","pm25_breakpoints","AQI_breakpoints","concentrationRounded","Math","round","conc_lo","length","conc_hi","AQI_lo","AQI_hi","counter","pm25_break","AQI","color","MapControl","selectedSensor","map","useMap","position","device","location","coordinates","name","characteristics","pm2_5ConcMass","value","aqi","pm2_5Conc","markerHtmlStyles","icon","divIcon","className","iconAnchor","labelAnchor","popupAnchor","html","setView","panTo","Marker","Tooltip","direction","permanent","style","SimpleMap","props","MapContainer","center","zoom","TileLayer","tileLayer","attribution","url","Search","Input","SensorsList","getData","a","fetch","response","json","data","sort","b","sensor","i","rank","data_with_rank","setState","sensors","onSensorSelect","state","onSearch","input","searchField","visualizedNumber","onAction","event","_id","target","id","onSeeMore","console","log","this","filteredSensors","filter","toLowerCase","includes","slice","header","placeholder","allowClear","enterButton","footer","onClick","bordered","dataSource","renderItem","item","Item","actions","Meta","title","description","date","time","avatar","backgroundColor","React","Component","App","href","textDecoration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3804da98.chunk.js","sourcesContent":["const calculatePm25AQI = (concentration) => {\r\n        const pm25_breakpoints = [[0.0, 12.0], [12.1, 35.4], [35.5, 55.4], [55.5, 150.4], [150.5, 250.4], [250.5, 350.4], [350.5, 500.4]]\r\n        const AQI_breakpoints = [[0, 50], [51, 100], [101, 150], [151, 200], [201, 300], [301, 400], [401, 500]]\r\n        const colors = ['#52c41a', '#fadb14', '#fa8c16', '#f5222d', '#722ed1', '#613400', '#613400', '#613400']\r\n\r\n        const concentrationRounded = Math.round(concentration * 10) / 10\r\n          let conc_lo = pm25_breakpoints[pm25_breakpoints.length-1][0]\r\n          let conc_hi = pm25_breakpoints[pm25_breakpoints.length-1][1]\r\n          let AQI_lo = AQI_breakpoints[AQI_breakpoints.length-1][0]\r\n          let AQI_hi = AQI_breakpoints[AQI_breakpoints.length-1][1]\r\n\r\n          let counter = 0\r\n          for (let pm25_break of pm25_breakpoints) {\r\n            if ((concentrationRounded >= pm25_break[0]) & (concentrationRounded <= pm25_break[1])) {\r\n              conc_lo = pm25_break[0]\r\n              conc_hi = pm25_break[1]\r\n              AQI_lo = AQI_breakpoints[counter][0]\r\n              AQI_hi = AQI_breakpoints[counter][1]\r\n              break\r\n            }\r\n            counter = counter + 1\r\n          }\r\n          let slope = (AQI_hi - AQI_lo)/(conc_hi - conc_lo)\r\n          let AQI = slope * (concentrationRounded - conc_lo) + AQI_lo\r\n          let color = colors[counter]\r\n          return [Math.round(AQI), color]\r\n}\r\n\r\nexport default calculatePm25AQI","import React from 'react'\r\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap} from 'react-leaflet'\r\nimport calculatePm25AQI from './utils.js'\r\nimport { divIcon } from 'leaflet'\r\n\r\nfunction MapControl({ selectedSensor }) {\r\n  const map = useMap()\r\n\r\n  if (selectedSensor) {\r\n    // console.log(selectedSensor.device.location.coordinates)\r\n    const position = [selectedSensor.device.location.coordinates[1],selectedSensor.device.location.coordinates[0]]\r\n    const name = selectedSensor.device.name\r\n    const color = calculatePm25AQI(selectedSensor.characteristics.pm2_5ConcMass.value)[1]\r\n    const aqi = calculatePm25AQI(selectedSensor.characteristics.pm2_5ConcMass.value)[0]\r\n    const pm2_5Conc = Math.round(selectedSensor.characteristics.pm2_5ConcMass.value)\r\n\r\n    const markerHtmlStyles = `\r\n      background-color: ${color};\r\n      width: 2rem;\r\n      height: 2rem;\r\n      display: block;\r\n      left: -1rem;\r\n      top: -1rem;\r\n      position: relative;\r\n      border-radius: 2rem 2rem 0;\r\n      transform: rotate(45deg);\r\n      border: 1px solid #FFFFFF`\r\n\r\n    const icon = divIcon({\r\n      className: \"my-custom-pin\",\r\n      iconAnchor: [0, 24],\r\n      labelAnchor: [-6, 0],\r\n      popupAnchor: [0, -36],\r\n      html: `<span style=\"${markerHtmlStyles}\" />`\r\n    })\r\n\r\n    map.setView(position, 10)\r\n    map.panTo(position)\r\n\r\n    return (\r\n      <Marker position={position} icon = {icon}>\r\n        <Tooltip direction='bottom' permanent>\r\n          <div className='tc'>\r\n          <h1 className='pv0 ph5' style={{color: '#275476'}}>{name}</h1>\r\n          <div className='pv0' ><p className='f5 b'>AQI: {aqi}</p></div>\r\n          <div>PM2.5 Concentration: {pm2_5Conc} Âµg/m<sup>3</sup></div>\r\n          </div>\r\n        </Tooltip>\r\n      </Marker>\r\n    )\r\n  } else { return null }\r\n}\r\n\r\nconst SimpleMap = (props) => {\r\n  \r\n  return(\r\n      <MapContainer style={{'height':'350px'}} center={[45,0]} zoom={2}>\r\n        <TileLayer\r\n          tileLayer = 'cartodbpositron'\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors, Map tiles by Carto.'\r\n          url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\r\n        />\r\n        <MapControl selectedSensor={props.selectedSensor}/>\r\n      </MapContainer>\r\n  )\r\n}\r\n \r\nexport default SimpleMap;","import React from 'react'\r\nimport { List } from 'antd'\r\nimport TimeAgo from 'react-timeago'\r\nimport { Input } from 'antd'\r\nimport { Button } from 'antd'\r\nimport { Tag } from 'antd'\r\nimport { Avatar } from 'antd'\r\nimport calculatePm25AQI from './utils.js'\r\nconst { Search } = Input\r\n\r\nclass SensorsList extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsensors: [],\r\n\t\t\tsearchField: '',\r\n\t\t\tvisualizedNumber: 10\r\n\t\t}\r\n\t}\r\n\r\n\tgetData = async () => {\r\n  \t\t\tconst response = await fetch(\"https://d149wkud6tbfrz.cloudfront.net/api/measurements/current\");\r\n  \t\t\tconst data = await response.json();\r\n  \t\t\tawait data.sort((a, b) => b.characteristics.pm2_5ConcMass.value - a.characteristics.pm2_5ConcMass.value)\r\n  \t\t\tconst data_with_rank = await data.map((sensor, i) => {\r\n  \t\t\t\tsensor.rank = i + 1\r\n  \t\t\t\treturn sensor\r\n  \t\t\t})\r\n  \t\t\t// console.log(data_with_rank[0])\r\n  \t\t\tthis.setState({ sensors: data_with_rank})\r\n  \t\t\tthis.props.onSensorSelect(this.state.sensors[0])\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getData()\r\n\t}\r\n\r\n\tonSearch = (input) => {\r\n\t\t// console.log(input)\r\n\t\tthis.setState({ searchField: input})\r\n\t\tthis.setState({ visualizedNumber: 10 })\r\n\t}\r\n\r\n\tonAction = (event) => {\r\n\t\t// this.props.onSensorSelect()\r\n\t\t// console.log(event.target.id)\r\n\t\tfor (let sensor of this.state.sensors) {\r\n\t\t\tif (sensor._id === event.target.id) {\r\n\t\t\t\t// console.log(sensor)\r\n\t\t\t\tthis.props.onSensorSelect(sensor)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// onSeeMore = () => { this.setState({ visualizedNumber: this.state.visualizedNumber + 20 })\r\n\tonSeeMore = (event) => {\r\n\t\tthis.setState({ visualizedNumber: this.state.visualizedNumber + 10 })\r\n\t\tconsole.log(this.state.visualizedNumber)\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, sensors, visualizedNumber } = this.state\r\n\t\tconst filteredSensors = sensors.filter(sensor => {\r\n\t\t\t\treturn sensor.device.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t}).slice(0, visualizedNumber)\r\n\r\n\t  \treturn (\r\n\t\t    <div>\r\n\t\t\t    <List\r\n\t\t\t      header={<div><Search placeholder=\"input search text\" allowClear onSearch={this.onSearch} enterButton /></div>}\r\n\t\t\t      footer={<div className='tc'><Button onClick={this.onSeeMore}>See More</Button></div>}\r\n\t\t\t      bordered\r\n\t\t\t      dataSource={filteredSensors}\r\n\t\t\t      renderItem={(item) => (\r\n\t\t\t        <List.Item id = {item._id} actions={[<a key=\"show-on-map\" id={item._id} onClick={this.onAction}>Show on map</a>]}>\r\n\t\t\t\t        <List.Item.Meta\r\n\t\t\t\t          title={item.device.name}\r\n\t\t\t\t          description = {<TimeAgo date={item.time}/>}\r\n\t\t\t\t          avatar = {<Avatar style={{ backgroundColor: '#595959'}}>#{item.rank}</Avatar>}\r\n\t\t\t\t        />\r\n\t\t\t\t        <div>{Math.round(item.characteristics.pm2_5ConcMass.value)} Âµg/m<sup>3</sup> <Tag color={calculatePm25AQI(item.characteristics.pm2_5ConcMass.value)[1]}>{calculatePm25AQI(item.characteristics.pm2_5ConcMass.value)[0]} AQI</Tag></div>\r\n\t\t\t\t    </List.Item>\r\n\t\t\t      )}\r\n\t\t\t    />\r\n\t\t    </div>\r\n\t  )\r\n\t}\r\n}\r\n\r\nexport default SensorsList;","import React from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport SimpleMap from './SimpleMap.js'\nimport SensorsList from './SensorsList.js'\nimport { Card } from 'antd'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n        selectedSensor: null,\n    }\n  }\n\n  onSensorSelect = (sensor) => {\n    this.setState({ selectedSensor: sensor})\n    // console.log(this.state.selectedSensor)\n  }\n\n  render() {\n    return (\n      <div className = 'pv2' style={{backgroundColor: \"#F1F9FF\"}}>\n        <div className = 'mw7 center tc mb2'>\n          <h1 className='f1 tc mb1' style={{color: '#275476'}}>AIR QUALITY RANKING</h1>\n          <h2 className='f4 tc' >Places with high particulate matter (PM2.5) pollution</h2>\n          <p>Data from <a href=\"https://clarity.io/\" style={{textDecoration: \"none\"}}>clarity.io</a></p>\n        </div>\n        <div className = 'mw7 center'>\n          <SimpleMap selectedSensor={this.state.selectedSensor}/>\n        </div>\n        <div className = \"mw7 center pt2 pb4\">\n          <div className = \"bg-white br3\">\n            <SensorsList onSensorSelect = {this.onSensorSelect} className = \"mw7\" />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n\n        // <Card className = 'mw7 center tc mb2' style={{borderColor: '#D9D9D9'}}>\n        //   <h1 className='f3 tc' >AIR QUALITY RANKING</h1>\n        //   <p className='f4 tc' >Places with high particulate matter (PM2.5) pollution</p>\n        // </Card>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport \"tachyons\"\nimport \"antd\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}