{"version":3,"sources":["SimpleMap.js","SensorsList.js","App.js","reportWebVitals.js","index.js"],"names":["MyComponent","selectedSensor","map","useMap","position","device","location","coordinates","name","setView","panTo","Marker","Popup","SimpleMap","props","MapContainer","style","center","zoom","TileLayer","tileLayer","attribution","url","Search","Input","SensorsList","getData","a","fetch","response","json","data","sort","b","characteristics","pm2_5ConcMass","value","setState","sensors","onSensorSelect","state","onSearch","input","searchField","visualizedNumber","onAction","event","console","log","target","id","sensor","_id","onSeeMore","calculatePm25AQI","concentration","pm25_breakpoints","AQI_breakpoints","concentrationRounded","Math","round","conc_lo","length","conc_hi","AQI_lo","AQI_hi","counter","pm25_break","AQI","color","this","filteredSensors","filter","toLowerCase","includes","slice","header","placeholder","allowClear","enterButton","footer","className","onClick","bordered","dataSource","renderItem","item","index","Item","actions","Meta","title","description","date","time","avatar","backgroundColor","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ea1a3c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet'\r\n\r\nfunction MyComponent({ selectedSensor }) {\r\n  const map = useMap()\r\n  if (selectedSensor) {\r\n    // console.log(selectedSensor.device.location.coordinates)\r\n    const position = [selectedSensor.device.location.coordinates[1],selectedSensor.device.location.coordinates[0]]\r\n    const name = selectedSensor.device.name\r\n    map.setView(position, 10)\r\n    map.panTo(position)\r\n    return (\r\n      <Marker position={position}>\r\n        <Popup>\r\n          {name}\r\n        </Popup>\r\n      </Marker>\r\n    )\r\n  } else { return null }\r\n}\r\n\r\nconst SimpleMap = (props) => {\r\n  \r\n  return(\r\n      <MapContainer style={{'height':'300px'}} center={[45,0]} zoom={2}>\r\n        <TileLayer\r\n          tileLayer = 'cartodbpositron'\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors, Map tiles by Carto.'\r\n          url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\r\n        />\r\n        <MyComponent selectedSensor={props.selectedSensor}/>\r\n      </MapContainer>\r\n  )\r\n}\r\n \r\nexport default SimpleMap;","import React from 'react'\r\nimport { List } from 'antd'\r\nimport TimeAgo from 'react-timeago'\r\nimport { Input } from 'antd'\r\nimport { Button } from 'antd'\r\nimport { Tag } from 'antd'\r\nimport { Avatar } from 'antd'\r\nconst { Search } = Input\r\n\r\nclass SensorsList extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsensors: [],\r\n\t\t\tsearchField: '',\r\n\t\t\tvisualizedNumber: 10\r\n\t\t}\r\n\t}\r\n\r\n\tgetData = async () => {\r\n  \t\t\tconst response = await fetch(\"https://d149wkud6tbfrz.cloudfront.net/api/measurements/current\");\r\n  \t\t\tconst data = await response.json();\r\n  \t\t\tawait data.sort((a, b) => b.characteristics.pm2_5ConcMass.value - a.characteristics.pm2_5ConcMass.value)\r\n  \t\t\t// console.log(data.length)\r\n  \t\t\tthis.setState({ sensors: data})\r\n  \t\t\tthis.props.onSensorSelect(this.state.sensors[0])\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getData()\r\n\t}\r\n\r\n\tonSearch = (input) => {\r\n\t\t// console.log(input)\r\n\t\tthis.setState({ searchField: input})\r\n\t\tthis.setState({ visualizedNumber: 10 })\r\n\t}\r\n\r\n\tonAction = (event) => {\r\n\t\t// this.props.onSensorSelect()\r\n\t\tconsole.log(event.target.id)\r\n\t\tfor (let sensor of this.state.sensors) {\r\n\t\t\tif (sensor._id === event.target.id) {\r\n\t\t\t\t// console.log(sensor)\r\n\t\t\t\tthis.props.onSensorSelect(sensor)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// onSeeMore = () => { this.setState({ visualizedNumber: this.state.visualizedNumber + 20 })\r\n\tonSeeMore = (event) => {\r\n\t\tthis.setState({ visualizedNumber: this.state.visualizedNumber + 10 })\r\n\t\tconsole.log(this.state.visualizedNumber)\r\n\t}\r\n\r\n\tcalculatePm25AQI = (concentration) => {\r\n\t\t    const pm25_breakpoints = [[0.0, 12.0], [12.1, 35.4], [35.5, 55.4], [55.5, 150.4], [150.5, 250.4], [250.5, 350.4], [350.5, 500.4]]\r\n\t\t    const AQI_breakpoints = [[0, 50], [51, 100], [101, 150], [151, 200], [201, 300], [301, 400], [401, 500]]\r\n\t\t    const colors = ['#52c41a', '#fadb14', '#fa8c16', '#f5222d', '#722ed1', '#613400']\r\n\r\n\t\t    const concentrationRounded = Math.round(concentration * 10) / 10\r\n        \tlet conc_lo = pm25_breakpoints[pm25_breakpoints.length-1][0]\r\n        \tlet conc_hi = pm25_breakpoints[pm25_breakpoints.length-1][1]\r\n        \tlet AQI_lo = AQI_breakpoints[AQI_breakpoints.length-1][0]\r\n        \tlet AQI_hi = AQI_breakpoints[AQI_breakpoints.length-1][1]\r\n\r\n        \tlet counter = 0\r\n        \tfor (let pm25_break of pm25_breakpoints) {\r\n        \t\tif ((concentrationRounded >= pm25_break[0]) & (concentrationRounded <= pm25_break[1])) {\r\n        \t\t\tconc_lo = pm25_break[0]\r\n        \t\t\tconc_hi = pm25_break[1]\r\n        \t\t\tAQI_lo = AQI_breakpoints[counter][0]\r\n        \t\t\tAQI_hi = AQI_breakpoints[counter][1]\r\n        \t\t\tbreak\r\n        \t\t}\r\n        \t\tcounter = counter + 1\r\n        \t}\r\n        \tlet slope = (AQI_hi - AQI_lo)/(conc_hi - conc_lo)\r\n        \tlet AQI = slope * (concentrationRounded - conc_lo) + AQI_lo\r\n        \tlet color = colors[counter]\r\n        \treturn [Math.round(AQI), color]\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, sensors, visualizedNumber } = this.state\r\n\t\tconst filteredSensors = sensors.filter(sensor => {\r\n\t\t\t\treturn sensor.device.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t}).slice(0, visualizedNumber)\r\n\r\n\t  \treturn (\r\n\t\t    <div>\r\n\t\t\t    <List\r\n\t\t\t      header={<div><Search placeholder=\"input search text\" allowClear onSearch={this.onSearch} enterButton /></div>}\r\n\t\t\t      footer={<div className='tc'><Button onClick={this.onSeeMore}>See More</Button></div>}\r\n\t\t\t      bordered\r\n\t\t\t      dataSource={filteredSensors}\r\n\t\t\t      renderItem={(item, index) => (\r\n\t\t\t        <List.Item id = {item._id} actions={[<a key=\"show-on-map\" id={item._id} onClick={this.onAction}>Show on map</a>]}>\r\n\t\t\t\t        <List.Item.Meta\r\n\t\t\t\t          title={item.device.name}\r\n\t\t\t\t          description = {<TimeAgo date={item.time}/>}\r\n\t\t\t\t          avatar = {<Avatar style={{ backgroundColor: '#595959'}}>#{index}</Avatar>}\r\n\t\t\t\t        />\r\n\t\t\t\t        <div>{Math.round(item.characteristics.pm2_5ConcMass.value)} µg/m3 <Tag color={this.calculatePm25AQI(item.characteristics.pm2_5ConcMass.value)[1]}>{this.calculatePm25AQI(item.characteristics.pm2_5ConcMass.value)[0]} AQI</Tag></div>\r\n\t\t\t\t    </List.Item>\r\n\t\t\t      )}\r\n\t\t\t    />\r\n\t\t    </div>\r\n\t  )\r\n\t}\r\n}\r\n\r\nexport default SensorsList;","import React from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport SimpleMap from './SimpleMap.js'\nimport SensorsList from './SensorsList.js'\n\nclass App extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n          selectedSensor: null,\n      }\n    }\n\n  onSensorSelect = (sensor) => {\n    this.setState({ selectedSensor: sensor})\n    // console.log(this.state.selectedSensor)\n  }\n\n  render() {\n    return (\n      <div style={{backgroundColor: \"#F1F9FF\"}}>\n        <h1 className='f2 tc ma0 pt4 pb2' >AIR QUALITY RANKING</h1>\n        <h2 className='f3 tc ma0 pb4' >Places with high particulate matter (PM2.5) pollution</h2>\n        <div className = 'mw7 center'>\n          <SimpleMap selectedSensor={this.state.selectedSensor}/>\n        </div>\n        <div className = \"mw7 center pv4\">\n          <div className = \"bg-white br3\">\n            <SensorsList onSensorSelect = {this.onSensorSelect}  className = \"mw7\" />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport \"tachyons\"\nimport \"react-leaflet\"\nimport \"antd\"\nimport \"react-timeago\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}